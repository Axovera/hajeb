#include <QXmlStreamWriter>
#include <QFile>
#include <QDateTime>
#include <QCryptographicHash>
#include <QDebug>

#include "xmllistwriter.h"

XmlListWriter::XmlListWriter()
{
    m_xmlFileMap[WHITE_LIST] = "wlist.xml";
    m_xmlFileMap[BLACK_LIST] = "blist.xml";

    m_md5FileMap[WHITE_LIST] = "wmd5.txt";
    m_md5FileMap[BLACK_LIST] = "bmd5.txt";

    m_prefixMap[WHITE_LIST] = "WHITE_";
    m_prefixMap[BLACK_LIST] = "BLACK_";
}

void XmlListWriter::write(ListType listType) {
    QFile xmlfile(m_xmlFileMap[listType]);
    if (xmlfile.exists() && xmlfile.size())
        return ;

    QFile file(m_xmlFileMap[listType]);
    if (!file.open(QIODevice::WriteOnly|QIODevice::Text)) {
        qDebug() << "Cannot open xml file for writing...";
        return ;
    }

    qDebug() << "File is opened." ;

    QString str = m_prefixMap[listType];

    QXmlStreamWriter writer(&file);
    writer.setAutoFormatting(true);
    writer.writeStartDocument();
    writer.writeComment("THIS LIST IS GENERATED BY COEIA XML GENERATOR TOOL");
    writer.writeComment("LAST UPDATE: " + QDateTime::currentDateTime().toString());


    writer.writeStartElement(XML_TAG_LIST);

    writer.writeStartElement(XML_TAG_CAT);
    writer.writeAttribute(XML_ATTR_NAME, str+"CAT_A");

    writer.writeStartElement(XML_TAG_WEB);
    writer.writeAttribute(XML_ATTR_URL,"http://www.facebook.com");
    writer.writeAttribute(XML_ATTR_HOST,"facebook.com");
    writer.writeEndElement();

    writer.writeEndElement();   // End of XML_TAG_CAT


    writer.writeStartElement(XML_TAG_CAT);
    writer.writeAttribute(XML_ATTR_NAME, str+"CAT_B");

    writer.writeStartElement(XML_TAG_WEB);
    writer.writeAttribute(XML_ATTR_URL,"http://www.google.com");
    writer.writeAttribute(XML_ATTR_HOST,"google.com");
    writer.writeEndElement();

//    writer.writeStartElement(XML_TAG_WEB);
//    writer.writeAttribute(XML_ATTR_URL,"http://www.yahoo.com");
//    writer.writeAttribute(XML_ATTR_HOST,"yahoo.com");
//    writer.writeEndElement();

//    writer.writeStartElement(XML_TAG_WEB);
//    writer.writeAttribute(XML_ATTR_URL,"http://www.msn.com");
//    writer.writeAttribute(XML_ATTR_HOST,"msn.com");
//    writer.writeEndElement();

    writer.writeEndElement();  // End of XML_TAG_CAT

    writer.writeStartElement(XML_TAG_CAT);
    writer.writeAttribute(XML_ATTR_NAME, str+"CAT_C");

    writer.writeStartElement(XML_TAG_WEB);
    writer.writeAttribute(XML_ATTR_URL,"http://www.youtube.com");
    writer.writeAttribute(XML_ATTR_HOST,"youtube.com");
    writer.writeEndElement();
    writer.writeEndElement();

    writer.writeEndElement();

    writer.writeEndDocument();

    file.close();

    writeFileHash(listType);
}

void XmlListWriter::writeFileHash(ListType listType) {
    QFile inFile(m_xmlFileMap[listType]);
    QFile outFile(m_md5FileMap[listType]);

    if (!inFile.open(QIODevice::ReadOnly|QIODevice::Text)) {
        qDebug() << "Cannot open xml file for reading...";
        return ;
    }

    if (!outFile.open(QIODevice::WriteOnly | QIODevice::Text)) {
        qDebug() << "Cannot open md5 file for reading hash...";
        return ;
    }

    QTextStream in(&inFile);
    QTextStream out(&outFile);

    out << QCryptographicHash::hash(in.readAll().toAscii(),QCryptographicHash::Md5).toHex();

    inFile.close();
    outFile.close();
}

bool XmlListWriter::checkHash(ListType listType) {
    QFile xmlFile(m_xmlFileMap[listType]);
    QFile md5File(m_md5FileMap[listType]);

    if (!xmlFile.open(QIODevice::ReadOnly|QIODevice::Text)) {
        qDebug() << "Cannot open xml file for reading...";
        return false;
    }

    if (!md5File.open(QIODevice::ReadOnly | QIODevice::Text)) {
        qDebug() << "Cannot open md5 file for reading hash...";
        return false;
    }

    QTextStream md5In(&md5File);
    QTextStream xmlIn(&xmlFile);

    QString hash = md5In.readAll();

    QString fileHash = QCryptographicHash::hash(xmlIn.readAll().toAscii(),QCryptographicHash::Md5).toHex();

    if (hash == fileHash)
        return true;
    else
        return false;
}
